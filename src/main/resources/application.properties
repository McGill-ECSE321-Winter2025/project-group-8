spring.application.name=gameorganizer
# spring.mvc.servlet.path=/api/v1

# Use H2 in-memory database for testing
# spring.datasource.url=jdbc:h2:mem:testdb
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=password
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# spring.h2.console.enabled=true

# PostgreSQL Configuration
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5433/game_organizer}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:skibidi}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Using create-drop for testing with H2 to recreate schema each time
# Using create-drop for testing with H2 to recreate schema each time
# spring.jpa.hibernate.ddl-auto=create-drop
# Using update for persistent databases like PostgreSQL
spring.jpa.hibernate.ddl-auto=update

# Hibernate properties
spring.jpa.properties.hibernate.format_sql=true

# Decide which port our backend will listen on.
# This is relevant for deliverable 2.
# Could also just set server.port = 8080 to always listen on port 8080.
# The advantage of using the following form is that you can change the port on
# startup, e.g., using .\gradlew bootRun --args='--port=9090'.
server.port = ${port:8080}

# JWT Configuration
# JWT secret should be provided via the JWT_SECRET environment variable for security.
# Increased from 1 hour (3600000ms) to 24 hours (86400000ms) to allow more time for testing
jwt.secret=${JWT_SECRET:defaultSecretKeyForDevelopmentDoNotUseInProduction}
jwt.expiration=86400000

# Email Configuration
# For Gmail, you need an App Password if 2-Step Verification is enabled
# Generate one at: Google Account > Security > App passwords
spring.mail.host=smtp.gmail.com
# Using port 465 for SSL connection
spring.mail.port=465
spring.mail.username=${EMAIL_USERNAME:pluh30918@gmail.com}
# For secure deployment, set this via environment variable: EMAIL_PASSWORD
spring.mail.password=${EMAIL_PASSWORD:GameOrganizerLgFridge}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
# Adding debug property to identify issues with email sending
spring.mail.properties.mail.debug=true
# Fix for Gmail SMTP authentication
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
# Additional settings to handle regular password authentication
spring.mail.properties.mail.smtp.ssl.enable=true
spring.mail.properties.mail.smtp.socketFactory.port=465
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
# Allow sending real emails even in development mode
email.send.in.dev=true

# Application URL for reset link (used in emails)
app.frontend.url=http://localhost:5173

# Set to true to activate development mode with additional endpoints
spring.profiles.active=dev

# Gmail API Configuration
use.gmail.api=false

# For development, you might need to set this if not automatically detected
server.forward-headers-strategy=native